{"version":3,"sources":["Urls.js","ListOfShows.js","ListOfSeasonEpisodes.js","ShowInfo.js","EpisodeInfo.js","SearchForm.js","Home.js","NotFound.js","App.js","serviceWorker.js","index.js"],"names":["buildOmdbApiUrlFromComponents","urlComponents","apiKey","baseUrl","urlElements","key","hasOwnProperty","push","encodeURIComponent","join","buildUrlFromComponents","handleImageError","ev","target","src","ListOfShows","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","searchForTvShows","what","params","match","searchTitle","searchYear","state","setState","refresh","url","type","year","s","trim","fetch","then","result","json","apiResult","handleSelectShow","e","initialState","searchPage","_this2","showList","error","Response","shows","Search","undefined","map","show","index","poster","Poster","react_default","a","createElement","imdbId","imdbID","onClick","width","react_router_dom","to","concat","Image","height","onError","Title","class","Year","Error","header","totalResults","Table","size","variant","className","Component","ListOfSeasonEpisodes","fetchSeasonInfo","imdbIdSeason","components","split","length","i","Season","episodeList","errorStr","episodes","Episodes","episode","Released","ShowInfo","fetchShowInfo","showCard","showInfo","cardText","item","totalSeasons","listOfSeasons","season","Badge","posterImage","Card","bg","text","Img","Body","Text","episodeInfo","fetchEpisodeInfo","episodeCard","SearchForm","handleFormSubmit","event","preventDefault","elements","value","redirectToPage","pageToRedirect","history","handleChange","_event$target","name","defineProperty","bind","assertThisInitialized","Form","href","onSubmit","inline","FormControl","onChange","placeholder","className_","withRouter","Home","React","Notfound","App","data","curTime","Navbar","expand","Container","Brand","alt","src_SearchForm","Toggle","aria-controls","Collapse","id","Nav","Link","react_router","exact","path","component","EpisodeInfo","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d37b45e7.chunk.js","sourcesContent":["export function buildUrlFromComponents(baseUrl, urlComponents) {\n   let urlElements = []\n   for (var key in urlComponents) {\n      if (urlComponents.hasOwnProperty(key)) {\n         urlElements.push(key + '=' + encodeURIComponent(urlComponents[key]))\n      }\n   }\n   const url = baseUrl + urlElements.join('&');\n\n   return url\n}\n\nexport function buildOmdbApiUrlFromComponents(urlComponents) {\n   const omdbApiBaseUrl = 'http://www.omdbapi.com/?'\n   const apiKey = '1e9e9365'\n   urlComponents.apiKey = apiKey // Add key to list of passed components\n\n   return buildUrlFromComponents(omdbApiBaseUrl, urlComponents)\n}\n\n   // Use missing image when image can'f be loaded\nexport function handleImageError(ev) {\n      ev.target.src = '/no-poster.png'\n   }\n","import React, { Component } from 'react'\nimport { Table, Image } from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\nimport { buildOmdbApiUrlFromComponents, handleImageError } from './Urls'\n\nclass ListOfShows extends Component {\n   constructor(props) {\n      super(props);\n      // the following needed otherwise handleFormSubmit doesn't have a this\n      //this.handleFormSubmit = this.handleFormSubmit.bind(this);\n      //      this.onSubmitSearch = this.onSubmitSearch.bind(this);\n\n      this.initialState = {\n         searchTitle: '',\n         searchYear: '',\n         searchPage: '',   // the omdb API only returns 10 entries at a time per \"page\"\n         apiResult: '',\n      }\n      this.state = this.initialState;\n   }\n\n   searchForTvShows = what => {\n      const { params } = this.props.match\n      let { searchTitle, searchYear } = params\n      if (searchTitle && searchTitle !== this.state.searchTitle) {\n         if (!searchYear) {\n            searchYear = 2018\n         }\n         this.setState({\n            searchTitle: searchTitle,\n            searchYear: searchYear,\n            refresh: false\n         })\n         const url = buildOmdbApiUrlFromComponents({\n            'type': 'series',\n            'year': searchYear,\n            's': searchTitle.trim(),\n         })\n         fetch(url)\n            .then(result => result.json())\n            .then(result => {\n               this.setState({\n                  apiResult: result\n               })\n            })\n      }\n   }\n\n   // Code is invoked after the component is mounted/inserted into the DOM tree.\n   componentDidMount() {\n      this.searchForTvShows()\n   }\n\n   componentDidUpdate() {\n   }\n\n   handleSelectShow = e => {\n      // const imdbID = e.target.parentElement.getAttribute('imdbid');\n      // console.log('We need to get the details for ', imdbID);\n      // alert('We need to get the details for '+imdbID);\n   }\n\n   render() {\n      const { params } = this.props.match\n      if (this.state.refresh !== true && this.state.searchTitle !== params.searchTitle) {\n         this.setState({ refresh: true })\n         this.searchForTvShows()\n      }\n      const { apiResult } = this.state\n      let showList = \"\"\n      let error = ''\n      if (apiResult !== \"\") {\n         if (apiResult.Response === \"True\") {\n            let shows = apiResult.Search\n            showList = []\n            if (shows !== undefined) {\n               showList = shows.map((show, index) => {\n                  let poster = show.Poster && show.Poster !== 'N/A' ? show.Poster : \"/no-poster.png\"\n                  return <tr imdbId={show.imdbID} key={index} onClick={this.handleSelectShow}>\n                     <td width=\"1px\"><Link to={`/show/${show.imdbID}`}>{index + 1}</Link></td>\n                     <td><Link to={`/show/${show.imdbID}`}><Image height=\"75px\" onError={handleImageError} src={poster} /></Link></td>\n                     <td><Link to={`/show/${show.imdbID}`}>{show.Title}</Link></td>\n                     <td class=\"text-nowrap\"><Link to={`/show/${show.imdbID}`}>{show.Year}</Link></td>\n                  </tr>\n               })\n            } else {\n               error = \"No show found\"\n            }\n         } else if (apiResult.Error) {\n            error = \"Error calling API: \" + apiResult.Error\n         } else {\n            error = \"Unknown error\"\n         }\n      }\n\n      let header = \"\"\n      if (showList !== \"\" && error === '') {\n         header = \"Found \" + apiResult.totalResults + \" matches.\"\n         showList = <Table class=\"table\" size=\"sm\" variant=\"dark\">\n            <thead>\n               <tr>\n                  <th>#</th>\n                  <th>Poster</th>\n                  <th>Title</th>\n                  <th>Years</th>\n               </tr>\n            </thead>\n            <tbody>\n               {showList}\n            </tbody>\n         </Table>\n\n      } else {\n         header = error\n         showList = \"\"\n      }\n\n      return (\n         <div className=\"container\">\n            < div><b>{header}</b></div >\n            <Table size=\"sm\" variant=\"dark\">{showList}</Table>\n         </div>\n      )\n   }\n}\nexport default ListOfShows\n","import React, { Component } from 'react'\nimport { Table } from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\nimport { buildOmdbApiUrlFromComponents } from './Urls'\n\nexport default class ListOfSeasonEpisodes extends Component {\n   constructor(props) {\n      super(props);\n\n      this.initialState = {\n         apiResult: '',\n         error: '',\n      }\n      this.state = this.initialState;\n   }\n\n   fetchSeasonInfo = what => {\n      const { params } = this.props.match\n      let { imdbIdSeason } = params\n      if (imdbIdSeason) {\n         const components = imdbIdSeason.split(\":\")\n         if (components.length === 2) {\n            const imdbID = components[0]\n            const season = components[1]\n            const url = buildOmdbApiUrlFromComponents({\n               'i': imdbID,\n               'Season': season,\n            });\n            fetch(url)\n               .then(result => result.json())\n               .then(result => {\n                  this.setState({\n                     apiResult: result\n                  })\n               })\n         } else {\n            this.error = \"Invalid URL request\"\n         }\n      }\n   }\n\n   // Code is invoked after the component is mounted/inserted into the DOM tree.\n   componentDidMount() {\n      this.fetchSeasonInfo()\n   }\n\n   render() {\n      const { apiResult } = this.state\n      let episodeList = \"\"\n      let errorStr = ''\n      if (this.state)\n         if (apiResult !== \"\") {\n            if (apiResult.Response === \"True\") {\n               let episodes = apiResult.Episodes\n               episodeList = []\n               if (episodes !== undefined) {\n                  episodeList = episodes.map((episode, index) => {\n                     return <tr imdbId={episode.imdbID} key={index}>\n                        <td width=\"1px\">{index + 1}</td>\n                        <td><Link to={`/episode/${episode.imdbID}`}>{episode.Title}</Link></td>\n                        <td class=\"text-nowrap\">{episode.Released}</td>\n                     </tr>\n                  })\n               } else {\n                  errorStr = \"No episode found\"\n               }\n            } else if (apiResult.Error) {\n               errorStr = \"Error calling API: \" + apiResult.Error\n            } else {\n               errorStr = \"Unknown error\"\n            } \n         }\n\n      if (episodeList === \"\" || errorStr !== '') {\n         errorStr = <div>{errorStr}</div>\n      } else {\n         episodeList = <div>Episode list for \"{apiResult.Title}\". Season {apiResult.Season}\n            <Table class=\"table\" size=\"sm\" variant=\"dark\">\n               <thead>\n                  <tr>\n                     <th>#</th>\n                     <th>Title</th>\n                     <th>Realeased</th>\n                  </tr>\n               </thead>\n               <tbody>\n                  {episodeList}\n               </tbody>\n            </Table>\n         </div>\n      }\n\n      return (\n         <div className=\"container\">\n            {errorStr}\n            {episodeList}\n         </div>\n      )\n   }\n}\n","import React, { Component } from 'react'\nimport { Card, Badge } from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\nimport { buildOmdbApiUrlFromComponents, handleImageError } from './Urls'\nimport './ShowInfo.css'\n\nexport default class ShowInfo extends Component {\n   constructor(props) {\n      super(props);\n\n      this.initialState = {\n         apiResult: '',\n      }\n      this.state = this.initialState;\n   }\n\n   fetchShowInfo = what => {\n      const { params } = this.props.match\n      let { imdbId } = params\n      if (imdbId) {\n         const url = buildOmdbApiUrlFromComponents({ 'i': imdbId })\n         fetch(url)\n            .then(result => result.json())\n            .then(result => {\n               this.setState({\n                  apiResult: result\n               })\n            })\n      }\n   }\n\n   // Code is invoked after the component is mounted/inserted into the DOM tree.\n   componentDidMount() {\n      this.fetchShowInfo()\n   }\n\n   /*\n      handleSelectSeason = e => {\n         const season = e.target.parentElement.getAttribute('season');\n         alert(\"need season:\" + season)\n      }\n   */\n   render() {\n      const { apiResult } = this.state\n      let showCard = \"\"\n      let error = ''\n      if (apiResult !== \"\") {\n         if (apiResult.Response === \"True\") {\n            let showInfo = apiResult\n            /*\n            let topItems = ['Title', 'Year', 'Rated', 'Released'];\n            const showCardTop = topItems.map((item) => {\n               return <div> <b>{item}:</b> {showInfo[item]}<br /></div>\n            })\n            let bottomItems = ['Genre', 'Plot', 'Actors', 'Language', 'imdbRating'];\n            const showCardBottom = bottomItems.map((item) => {\n               return <div> <b>{item}:</b> {showInfo[item]}<br /></div>\n            })\n            const totalSeasons = showInfo.totalSeasons;\n            let listOfSeasons = []\n            for(let season=1; season<=totalSeasons; season++) {\n               listOfSeasons.push(<li key={season}><Link to={`/season/${showInfo.imdbID}:${season}`}>Season #{season}</Link></li>)\n            }\n            showCard = <table><tr><td><Image height=\"180px\" src={showInfo.Poster} /></td><td>{showCardTop}</td></tr>\n               <tr><td colSpan=\"2\" valign=\"top\">{showCardBottom}</td></tr>\n               <tr><td colSpan=\"2\" valign=\"top\"><br/><b>{totalSeasons} Seasons:</b><ul>{listOfSeasons}</ul></td></tr>\n            </table>\n            //            showCard = <div><Image height=\"200px\" src={showInfo.Poster}/>{showCard}</div>\n            */\n            const cardTextItems = ['Year', 'Rated', 'Released', 'Genre', 'Plot', 'Actors', 'Language', 'imdbRating'];\n            const cardText = cardTextItems.map((item) => {\n               return <div> <b>{item}:</b> <i>{showInfo[item]}</i><br /></div>\n            })\n            const totalSeasons = showInfo.totalSeasons;\n            let listOfSeasons = []\n            for (let season = 1; season <= totalSeasons; season++) {\n               listOfSeasons.push(<Link to={`/season/${showInfo.imdbID}:${season}`}><span ><Badge variant=\"secondary\">Season {season}</Badge> </span></Link>)\n            }\n            const posterImage = showInfo.Poster && showInfo.Poster !== 'N/A' ? showInfo.Poster : \"/no-poster.png\"\n            showCard = <Card bg=\"dark\" text=\"white\" >\n               <Card.Img variant=\"top\" class=\"poster-image mx-auto d-block\" onError={handleImageError} src={posterImage} />\n               <Card.Body>\n                  <Card.Title>{showInfo.Title}</Card.Title>\n                  <Card.Text>\n                     {cardText}\n                     <br />\n                     <b>{totalSeasons} Seasons:</b>\n                     <div>\n                        {listOfSeasons}\n                     </div>\n                  </Card.Text>\n               </Card.Body>\n            </Card>\n         } else if (apiResult.Error) {\n            error = \"Error calling API: \" + apiResult.Error\n         } else {\n            error = \"Unknown error\"\n         }\n      }\n      if (showCard === \"\" || error !== '') {\n         showCard = error\n      }\n\n      return (\n         <div className=\"container\">\n            {showCard}\n         </div>\n      )\n   }\n}\n","import React, { Component } from 'react'\nimport { Card } from 'react-bootstrap'\nimport { buildOmdbApiUrlFromComponents, handleImageError } from './Urls'\n\nexport default class episodeInfo extends Component {\n   constructor(props) {\n      super(props);\n\n      this.initialState = {\n         apiResult: '',\n      }\n      this.state = this.initialState;\n   }\n\n   fetchEpisodeInfo = what => {\n      const { params } = this.props.match\n      let { imdbId } = params\n      if (imdbId) {\n         const url = buildOmdbApiUrlFromComponents({\n            'i': imdbId\n         })\n         fetch(url)\n            .then(result => result.json())\n            .then(result => {\n               this.setState({\n                  apiResult: result\n               })\n            })\n      }\n   }\n\n   // Code is invoked after the component is mounted/inserted into the DOM tree.\n   componentDidMount() {\n      this.fetchEpisodeInfo()\n   }\n\n   render() {\n      const { apiResult } = this.state\n      let episodeCard = \"\"\n      let error = ''\n      if (apiResult !== \"\") {\n         if (apiResult.Response === \"True\") {\n            let episodeInfo = apiResult\n            /*\n                       let topItems = ['Title', 'Season', 'Episode', 'Year', 'Rated', 'Released'];\n                       const episodeCardTop = topItems.map((item) => {\n                          return <div> <b>{item}:</b> {episodeInfo[item]}<br /></div>\n                       })\n                       let bottomItems = ['Plot', 'Actors', 'Director', 'Language', 'imdbRating'];\n                       const episodeCardBottom = bottomItems.map((item) => {\n                          return <div> <b>{item}:</b> {episodeInfo[item]}<br /></div>\n                       })\n                       episodeCard = <table><tr><td><Image height=\"180px\" width=\"200px\" src={episodeInfo.Poster} /></td><td width=\"500px\">{episodeCardTop}</td></tr>\n                          <tr><td colSpan=\"2\" valign=\"top\">{episodeCardBottom}</td></tr>\n                       </table>\n                       */\n            //            episodeCard = <div><Image height=\"200px\" src={episodeInfo.Poster}/>{episodeCard}</div>\n            const cardTextItems = ['Season', 'Episode', 'Year', 'Rated', 'Released', 'Plot', 'Actors', 'Director', 'Language', 'imdbRating']\n            const cardText = cardTextItems.map((item) => {\n               return <div> <b>{item}:</b> <i>{episodeInfo[item]}</i><br /></div>\n            })\n            episodeCard = <Card bg=\"dark\" text=\"white\" >\n               <Card.Img variant=\"top\" class=\"poster-image mx-auto d-block img-responsive\" onError={handleImageError} src={episodeInfo.Poster} />\n               <Card.Body>\n                  <Card.Title>\"{episodeInfo.Title}\"</Card.Title>\n                  <Card.Text>\n                     {cardText}\n                  </Card.Text>\n               </Card.Body>\n            </Card>\n\n         } else if (apiResult.Error) {\n            error = \"Error calling API: \" + apiResult.Error\n         } else {\n            error = \"Unknown error\"\n         }\n      }\n      if (episodeCard === \"\" || error !== '') {\n         episodeCard = error\n      }\n\n      return (\n         <div className=\"container\">\n            {episodeCard}\n         </div>\n      )\n   }\n}\n","import React, { Component } from 'react';\nimport { Form, FormControl } from 'react-bootstrap'\nimport { withRouter } from 'react-router-dom'\n// import history from './history'\n\n\nclass SearchForm extends Component {\n   constructor(props) {\n      super(props);\n      // the following needed otherwise handleFormSubmit doesn't have a this\n      this.handleFormSubmit = this.handleFormSubmit.bind(this);\n\n      this.initialState = {\n         searchTitle: '',\n         searchYear: '',\n         searchPage: '',   // the omdb API only returns 10 entries at a time per \"page\"\n         redirectToPage: false,\n         pageToRedirect: \"\"\n      }\n      this.state = this.initialState;\n   }\n\n   handleFormSubmit = event => {\n      event.preventDefault()\n      let searchTitle = event.target.elements[0].value\n      this.setState({\n         redirectToPage: false,\n         pageToRedirect: \"/shows/\" + searchTitle,\n      })\n      this.props.history.push(\"/shows/\" + searchTitle)\n   }\n\n   handleChange = event => {\n      const { name, value } = event.target;\n\n      this.setState({\n         [name]: value\n      });\n   }\n\n   render() {\n      return (\n                  <div>\n            <Form href=\"#search\" onSubmit={this.handleFormSubmit} inline>\n               <FormControl onChange={this.handleChange} bg=\"dark\" type=\"text\" name=\"searchTitle\" placeholder=\"Search TV show\"\n                  className_=\"mr-sm-2\" />\n            </Form>\n         </div>\n      );\n   }\n}\n\nexport default withRouter(SearchForm)\n\n/*\n            {this.state.redirectToPage && (\n               <Redirect to={this.state.pageToRedirect} />\n            )}\n*/\n","import React from 'react'\nimport \"./Home.css\"\n\nexport default class Home extends React.Component {\n   render() {\n      return (\n         <div className=\"lander\">\n            <h1>FoMoNoMo TV</h1>\n            <p>Never miss your favorite TV shows again</p>\n         </div>\n      );\n\n   }\n}\n","import React from 'react'\nconst Notfound = () => <h1>Not found</h1>\nexport default Notfound\n","import React, { Component } from 'react';\nimport { Nav, Navbar, Container } from 'react-bootstrap'\nimport { Route, BrowserRouter as Router, Switch } from 'react-router-dom'\nimport './App.css';\nimport ListOfShows from './ListOfShows'\nimport ListOfSeasonEpisodes from './ListOfSeasonEpisodes'\nimport ShowInfo from './ShowInfo'\nimport EpisodeInfo from './EpisodeInfo'\nimport SearchForm from './SearchForm';\nimport Home from './Home';\nimport Notfound from './NotFound'\n// import history from './history'\n\nclass App extends Component {\n   constructor(props) {\n      super(props);\n\n      this.initialState = {\n         searchTitle: '',\n         searchYear: '',\n         searchPage: '',   // the omdb API only returns 10 entries at a time per \"page\"\n         data: [],\n         curTime: null\n      }\n      this.state = this.initialState;\n   }\n\n   render() {\n      return (\n         <Router>\n            <div className=\"container\">\n               <Navbar className=\"justify-content-between\" expand=\"xl\" bg=\"black\">\n                  <Container>\n                     <Navbar.Brand href=\"/\"><img\n                        src=\"/fmnm_blue.png\"\n                        width=\"32\"\n                        height=\"32\"\n                        className=\"d-inline-block align-top\"\n                        alt=\"React Bootstrap logo\" />\n                     </Navbar.Brand>\n                     <SearchForm history={this.props.history} />\n                     <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                     <Navbar.Collapse id=\"basic-navbar-nav\">\n                           <Nav.Link href=\"/\">Home</Nav.Link>\n                           <Nav.Link href=\"/profile\">Profile</Nav.Link>\n                     </Navbar.Collapse>\n                  </Container>\n               </Navbar>\n               <Switch>\n                  <Route exact path=\"/\" component={Home} />\n                  <Route path=\"/shows/:searchTitle\" component={ListOfShows} />\n                  <Route path=\"/show/:imdbId\" component={ShowInfo} />\n                  <Route path=\"/season/:imdbIdSeason\" component={ListOfSeasonEpisodes} />\n                  <Route path=\"/episode/:imdbId\" component={EpisodeInfo} />\n                  <Route component={Notfound} />\n               </Switch>\n            </div>\n         </Router>\n      );\n   }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import { BrowserRouter as Router } from 'react-router-dom'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import history from './history'\n\n/*\nReactDOM.render((\n   <Router history={history}>\n      <App />\n   </Router>\n), document.getElementById('root'));\n*/\nReactDOM.render((\n         <App />\n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}