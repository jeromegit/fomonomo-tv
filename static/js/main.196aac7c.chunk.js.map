{"version":3,"sources":["Urls.js","ListOfShows.js","ListOfSeasonEpisodes.js","Poster.js","ShowInfo.js","EpisodeInfo.js","SearchForm.js","Home.js","NotFound.js","App.js","serviceWorker.js","config.js","index.js"],"names":["buildOmdbApiUrlFromComponents","urlComponents","apiKey","baseUrl","urlElements","key","hasOwnProperty","push","encodeURIComponent","join","buildUrlFromComponents","handleImageError","ev","target","src","ListOfShows","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","searchForTvShows","what","params","match","searchTitle","searchYear","state","setState","refresh","url","type","year","s","trim","fetch","then","result","json","apiResult","handleSelectShow","e","initialState","searchPage","_this2","document","activeElement","blur","showList","error","Response","shows","Search","undefined","map","show","index","poster","Poster","react_default","a","createElement","imdbId","imdbID","onClick","width","react_router_dom","to","concat","Image","height","onError","Title","class","Year","Error","header","totalResults","Table","size","variant","className","Component","ListOfSeasonEpisodes","fetchSeasonInfo","imdbIdSeason","components","split","length","i","Season","episodeList","errorStr","episodes","Episodes","episode","Released","encodedUri","posterImage","uri","decodeURIComponent","ShowInfo","fetchShowInfo","showCard","showInfo","cardText","item","totalSeasons","listOfSeasons","season","Badge","posterImageEncodedUri","Card","bg","text","Img","Body","Text","episodeInfo","fetchEpisodeInfo","episodeCard","SearchForm","handleFormSubmit","event","preventDefault","elements","value","redirectToPage","pageToRedirect","history","handleChange","_event$target","name","defineProperty","bind","assertThisInitialized","Form","href","onSubmit","inline","className_","FormControl","onChange","placeholder","withRouter","Home","React","Notfound","App","data","curTime","Navbar","expand","Brand","alt","src_SearchForm","Toggle","aria-controls","Collapse","id","Nav","Link","react_router","exact","path","component","EpisodeInfo","Boolean","window","location","hostname","config","process","REACT_APP_STAGE","STRIPE_KEY","s3","REGION","BUCKET","apiGateway","URL","cognito","USER_POOL_ID","APP_CLIENT_ID","IDENTITY_POOL_ID","src_config","objectSpread","MAX_ATTACHMENT_SIZE","Amplify","configure","Auth","mandatorySignIn","region","userPoolId","identityPoolId","userPoolWebClientId","Storage","bucket","API","endpoints","endpoint","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.196aac7c.chunk.js","sourcesContent":["export function buildUrlFromComponents(baseUrl, urlComponents) {\n   let urlElements = []\n   for (var key in urlComponents) {\n      if (urlComponents.hasOwnProperty(key)) {\n         urlElements.push(key + '=' + encodeURIComponent(urlComponents[key]))\n      }\n   }\n   const url = baseUrl + urlElements.join('&');\n\n   return url\n}\n\nexport function buildOmdbApiUrlFromComponents(urlComponents) {\n   const omdbApiBaseUrl = 'http://www.omdbapi.com/?'\n   const apiKey = '1e9e9365'\n   urlComponents.apiKey = apiKey // Add key to list of passed components\n\n   return buildUrlFromComponents(omdbApiBaseUrl, urlComponents)\n}\n\n// Use missing image when image can'f be loaded\nexport function handleImageError(ev) {\n   ev.target.src = '/no-poster.png'\n}\n","import React, { Component } from 'react'\nimport { Table, Image } from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\nimport { buildOmdbApiUrlFromComponents, handleImageError } from './Urls'\n\nclass ListOfShows extends Component {\n   constructor(props) {\n      super(props);\n      // the following needed otherwise handleFormSubmit doesn't have a this\n      //this.handleFormSubmit = this.handleFormSubmit.bind(this);\n      //      this.onSubmitSearch = this.onSubmitSearch.bind(this);\n\n      this.initialState = {\n         searchTitle: '',\n         searchYear: '',\n         searchPage: '',   // the omdb API only returns 10 entries at a time per \"page\"\n         apiResult: '',\n      }\n      this.state = this.initialState;\n   }\n\n   searchForTvShows = what => {\n      const { params } = this.props.match\n      let { searchTitle, searchYear } = params\n      if (searchTitle && searchTitle !== this.state.searchTitle) {\n         if (!searchYear) {\n            searchYear = 2018\n         }\n         this.setState({\n            searchTitle: searchTitle,\n            searchYear: searchYear,\n            refresh: false\n         })\n         const url = buildOmdbApiUrlFromComponents({\n            'type': 'series',\n            'year': searchYear,\n            's': searchTitle.trim(),\n         })\n         fetch(url)\n            .then(result => result.json())\n            .then(result => {\n               this.setState({\n                  apiResult: result\n               })\n            })\n      }\n   }\n\n   // Code is invoked after the component is mounted/inserted into the DOM tree.\n   componentDidMount() {\n      this.searchForTvShows()\n   }\n\n   componentDidUpdate() {\n   }\n\n   handleSelectShow = e => {\n      // const imdbID = e.target.parentElement.getAttribute('imdbid');\n      // console.log('We need to get the details for ', imdbID);\n      // alert('We need to get the details for '+imdbID);\n   }\n\n   render() {\n      document.activeElement.blur() // make the keyboard disappear\n      const { params } = this.props.match\n      if (this.state.refresh !== true && this.state.searchTitle !== params.searchTitle) {\n         this.setState({ refresh: true })\n         this.searchForTvShows()\n      }\n      const { apiResult } = this.state\n      let showList = \"\"\n      let error = ''\n      if (apiResult !== \"\") {\n         if (apiResult.Response === \"True\") {\n            let shows = apiResult.Search\n            showList = []\n            if (shows !== undefined) {\n               showList = shows.map((show, index) => {\n                  let poster = show.Poster && show.Poster !== 'N/A' ? show.Poster : \"/no-poster.png\"\n                  return <tr imdbId={show.imdbID} key={index} onClick={this.handleSelectShow}>\n                     <td width=\"1px\"><Link to={`/show/${show.imdbID}`}>{index + 1}</Link></td>\n                     <td><Link to={`/show/${show.imdbID}`}><Image height=\"75px\" onError={handleImageError} src={poster} /></Link></td>\n                     <td><Link to={`/show/${show.imdbID}`}>{show.Title}</Link></td>\n                     <td class=\"text-nowrap\"><Link to={`/show/${show.imdbID}`}>{show.Year}</Link></td>\n                  </tr>\n               })\n            } else {\n               error = \"No show found\"\n            }\n         } else if (apiResult.Error) {\n            error = \"Error calling API: \" + apiResult.Error\n         } else {\n            error = \"Unknown error\"\n         }\n      }\n\n      let header = \"\"\n      if (showList !== \"\" && error === '') {\n         header = \"Found \" + apiResult.totalResults + \" matches.\"\n         showList = <Table class=\"table\" size=\"sm\" variant=\"dark\">\n            <thead>\n               <tr>\n                  <th>#</th>\n                  <th>Poster</th>\n                  <th>Title</th>\n                  <th>Years</th>\n               </tr>\n            </thead>\n            <tbody>\n               {showList}\n            </tbody>\n         </Table>\n\n      } else {\n         header = error\n         showList = \"\"\n      }\n\n      return (\n         <div className=\"container\">\n            < div><b>{header}</b></div >\n            <Table size=\"sm\" variant=\"dark\">{showList}</Table>\n         </div>\n      )\n   }\n}\nexport default ListOfShows\n","import React, { Component } from 'react'\nimport { Table } from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\nimport { buildOmdbApiUrlFromComponents } from './Urls'\n\nexport default class ListOfSeasonEpisodes extends Component {\n   constructor(props) {\n      super(props);\n\n      this.initialState = {\n         apiResult: '',\n         error: '',\n      }\n      this.state = this.initialState;\n   }\n\n   fetchSeasonInfo = what => {\n      const { params } = this.props.match\n      let { imdbIdSeason } = params\n      if (imdbIdSeason) {\n         const components = imdbIdSeason.split(\":\")\n         if (components.length === 2) {\n            const imdbID = components[0]\n            const season = components[1]\n            const url = buildOmdbApiUrlFromComponents({\n               'i': imdbID,\n               'Season': season,\n            });\n            fetch(url)\n               .then(result => result.json())\n               .then(result => {\n                  this.setState({\n                     apiResult: result\n                  })\n               })\n         } else {\n            this.error = \"Invalid URL request\"\n         }\n      }\n   }\n\n   // Code is invoked after the component is mounted/inserted into the DOM tree.\n   componentDidMount() {\n      this.fetchSeasonInfo()\n   }\n\n   render() {\n      const { apiResult } = this.state\n      let episodeList = \"\"\n      let errorStr = ''\n      if (this.state)\n         if (apiResult !== \"\") {\n            if (apiResult.Response === \"True\") {\n               let episodes = apiResult.Episodes\n               episodeList = []\n               if (episodes !== undefined) {\n                  episodeList = episodes.map((episode, index) => {\n                     return <tr imdbId={episode.imdbID} key={index}>\n                        <td width=\"1px\">{index + 1}</td>\n                        <td><Link to={`/episode/${episode.imdbID}`}>{episode.Title}</Link></td>\n                        <td class=\"text-nowrap\">{episode.Released}</td>\n                     </tr>\n                  })\n               } else {\n                  errorStr = \"No episode found\"\n               }\n            } else if (apiResult.Error) {\n               errorStr = \"Error calling API: \" + apiResult.Error\n            } else {\n               errorStr = \"Unknown error\"\n            } \n         }\n\n      if (episodeList === \"\" || errorStr !== '') {\n         errorStr = <div>{errorStr}</div>\n      } else {\n         episodeList = <div>Episode list for \"{apiResult.Title}\". Season {apiResult.Season}\n            <Table class=\"table\" size=\"sm\" variant=\"dark\">\n               <thead>\n                  <tr>\n                     <th>#</th>\n                     <th>Title</th>\n                     <th>Realeased</th>\n                  </tr>\n               </thead>\n               <tbody>\n                  {episodeList}\n               </tbody>\n            </Table>\n         </div>\n      }\n\n      return (\n         <div className=\"container\">\n            {errorStr}\n            {episodeList}\n         </div>\n      )\n   }\n}\n","import React, { Component } from 'react'\nimport { Image } from 'react-bootstrap'\nimport { handleImageError } from './Urls'\n\nexport default class Poster extends Component {\n   render() {\n      const { params } = this.props.match\n      let { encodedUri } = params\n      let posterImage = ''\n      if (encodedUri) {\n         let uri = decodeURIComponent(encodedUri)\n         posterImage = <Image src={uri} onError={handleImageError} />\n      }\n\n      return (\n         <div class=\"d-flex justify-content-center\">\n            {posterImage}\n         </div>\n      )\n   }\n}\n","import React, { Component } from 'react'\nimport { Card, Badge } from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\nimport { buildOmdbApiUrlFromComponents, handleImageError } from './Urls'\nimport './ShowInfo.css'\n\nexport default class ShowInfo extends Component {\n   constructor(props) {\n      super(props);\n\n      this.initialState = {\n         apiResult: '',\n      }\n      this.state = this.initialState;\n   }\n\n   fetchShowInfo = what => {\n      const { params } = this.props.match\n      let { imdbId } = params\n      if (imdbId) {\n         const url = buildOmdbApiUrlFromComponents({ 'i': imdbId })\n         fetch(url)\n            .then(result => result.json())\n            .then(result => {\n               this.setState({\n                  apiResult: result\n               })\n            })\n      }\n   }\n\n   // Code is invoked after the component is mounted/inserted into the DOM tree.\n   componentDidMount() {\n      this.fetchShowInfo()\n   }\n\n   /*\n      handleSelectSeason = e => {\n         const season = e.target.parentElement.getAttribute('season');\n         alert(\"need season:\" + season)\n      }\n   */\n   render() {\n      const { apiResult } = this.state\n      let showCard = \"\"\n      let error = ''\n      if (apiResult !== \"\") {\n         if (apiResult.Response === \"True\") {\n            let showInfo = apiResult\n            /*\n            let topItems = ['Title', 'Year', 'Rated', 'Released'];\n            const showCardTop = topItems.map((item) => {\n               return <div> <b>{item}:</b> {showInfo[item]}<br /></div>\n            })\n            let bottomItems = ['Genre', 'Plot', 'Actors', 'Language', 'imdbRating'];\n            const showCardBottom = bottomItems.map((item) => {\n               return <div> <b>{item}:</b> {showInfo[item]}<br /></div>\n            })\n            const totalSeasons = showInfo.totalSeasons;\n            let listOfSeasons = []\n            for(let season=1; season<=totalSeasons; season++) {\n               listOfSeasons.push(<li key={season}><Link to={`/season/${showInfo.imdbID}:${season}`}>Season #{season}</Link></li>)\n            }\n            showCard = <table><tr><td><Image height=\"180px\" src={showInfo.Poster} /></td><td>{showCardTop}</td></tr>\n               <tr><td colSpan=\"2\" valign=\"top\">{showCardBottom}</td></tr>\n               <tr><td colSpan=\"2\" valign=\"top\"><br/><b>{totalSeasons} Seasons:</b><ul>{listOfSeasons}</ul></td></tr>\n            </table>\n            //            showCard = <div><Image height=\"200px\" src={showInfo.Poster}/>{showCard}</div>\n            */\n            const cardTextItems = ['Year', 'Rated', 'Released', 'Genre', 'Plot', 'Actors', 'Language', 'imdbRating'];\n            const cardText = cardTextItems.map((item) => {\n               return <div> <b>{item}:</b> <i>{showInfo[item]}</i><br /></div>\n            })\n            const totalSeasons = showInfo.totalSeasons;\n            let listOfSeasons = []\n            for (let season = 1; season <= totalSeasons; season++) {\n               listOfSeasons.push(<Link to={`/season/${showInfo.imdbID}:${season}`}><span ><Badge variant=\"secondary\">Season {season}</Badge> </span></Link>)\n            }\n            const posterImage = showInfo.Poster && showInfo.Poster !== 'N/A' ? showInfo.Poster : \"/no-poster.png\"\n            let posterImageEncodedUri = encodeURIComponent(posterImage)\n            showCard = <Card bg=\"dark\" text=\"white\" >\n               <Link to={`/poster/${posterImageEncodedUri}`}>\n                  <Card.Img variant=\"top\" class=\"poster-image mx-auto d-block\" onError={handleImageError} src={posterImage} />\n               </Link>\n               <Card.Body>\n                  <Card.Title>{showInfo.Title}</Card.Title>\n                  <Card.Text>\n                     {cardText}\n                     <br />\n                     <b>{totalSeasons} Seasons:</b>\n                     <div>\n                        {listOfSeasons}\n                     </div>\n                  </Card.Text>\n               </Card.Body>\n            </Card >\n         } else if (apiResult.Error) {\n            error = \"Error calling API: \" + apiResult.Error\n         } else {\n            error = \"Unknown error\"\n         }\n      }\n      if (showCard === \"\" || error !== '') {\n         showCard = error\n      }\n\n      return (\n         <div className=\"container\">\n            {showCard}\n         </div>\n      )\n   }\n}\n","import React, { Component } from 'react'\nimport { Card } from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\nimport { buildOmdbApiUrlFromComponents, handleImageError } from './Urls'\n\nexport default class episodeInfo extends Component {\n   constructor(props) {\n      super(props);\n\n      this.initialState = {\n         apiResult: '',\n      }\n      this.state = this.initialState;\n   }\n\n   fetchEpisodeInfo = what => {\n      const { params } = this.props.match\n      let { imdbId } = params\n      if (imdbId) {\n         const url = buildOmdbApiUrlFromComponents({\n            'i': imdbId\n         })\n         fetch(url)\n            .then(result => result.json())\n            .then(result => {\n               this.setState({\n                  apiResult: result\n               })\n            })\n      }\n   }\n\n   // Code is invoked after the component is mounted/inserted into the DOM tree.\n   componentDidMount() {\n      this.fetchEpisodeInfo()\n   }\n\n   render() {\n      const { apiResult } = this.state\n      let episodeCard = \"\"\n      let error = ''\n      if (apiResult !== \"\") {\n         if (apiResult.Response === \"True\") {\n            let episodeInfo = apiResult\n            const cardTextItems = ['Season', 'Episode', 'Year', 'Rated', 'Released', 'Plot', 'Actors', 'Director', 'Language', 'imdbRating']\n            const cardText = cardTextItems.map((item) => {\n               return <div> <b>{item}:</b> <i>{episodeInfo[item]}</i><br /></div>\n            })\n            let posterImageEncodedUri = encodeURIComponent(episodeInfo.Poster)\n            episodeCard = <Card bg=\"dark\" text=\"white\" >\n               <Link to={`/poster/${posterImageEncodedUri}`}>\n                  <Card.Img variant=\"top\" class=\"poster-image mx-auto d-block img-responsive\" onError={handleImageError} src={episodeInfo.Poster} />\n               </Link>\n               <Card.Body>\n                  <Card.Title>\"{episodeInfo.Title}\"</Card.Title>\n                  <Card.Text>\n                     {cardText}\n                  </Card.Text>\n               </Card.Body>\n            </Card>\n\n         } else if (apiResult.Error) {\n            error = \"Error calling API: \" + apiResult.Error\n         } else {\n            error = \"Unknown error\"\n         }\n      }\n      if (episodeCard === \"\" || error !== '') {\n         episodeCard = error\n      }\n\n      return (\n         <div className=\"container\">\n            {episodeCard}\n         </div>\n      )\n   }\n}\n","import React, { Component } from 'react';\nimport { Form, FormControl } from 'react-bootstrap'\nimport { withRouter } from 'react-router-dom'\n// import history from './history'\n\n\nclass SearchForm extends Component {\n   constructor(props) {\n      super(props);\n      // the following needed otherwise handleFormSubmit doesn't have a this\n      this.handleFormSubmit = this.handleFormSubmit.bind(this);\n\n      this.initialState = {\n         searchTitle: '',\n         searchYear: '',\n         searchPage: '',   // the omdb API only returns 10 entries at a time per \"page\"\n         redirectToPage: false,\n         pageToRedirect: \"\"\n      }\n      this.state = this.initialState;\n   }\n\n   handleFormSubmit = event => {\n      event.preventDefault()\n      let searchTitle = event.target.elements[0].value\n      this.setState({\n         redirectToPage: false,\n         pageToRedirect: \"/shows/\" + searchTitle,\n      })\n      this.props.history.push(\"/shows/\" + searchTitle)\n   }\n\n   handleChange = event => {\n      const { name, value } = event.target;\n\n      this.setState({\n         [name]: value\n      });\n   }\n\n   render() {\n      return (\n         <Form href=\"#search\" onSubmit={this.handleFormSubmit} inline className_=\"mx-0\" >\n            <FormControl onChange={this.handleChange} bg=\"dark\" type=\"text\" name=\"searchTitle\" placeholder=\"Search TV show\"/>\n         </Form>\n      );\n   }\n}\n\nexport default withRouter(SearchForm)\n","import React from 'react'\nimport \"./Home.css\"\n\nexport default class Home extends React.Component {\n   render() {\n      return (\n         <div className=\"lander\">\n            <h1>FoMoNoMo TV</h1>\n            <p>Never miss your favorite TV shows again</p>\n         </div>\n      );\n\n   }\n}\n","import React from 'react'\nconst Notfound = () => <h1>Not found</h1>\nexport default Notfound\n","import React, { Component } from 'react';\nimport { Nav, Navbar } from 'react-bootstrap'\nimport { Route, HashRouter as Router, Switch } from 'react-router-dom'\nimport './App.css';\nimport ListOfShows from './ListOfShows'\nimport ListOfSeasonEpisodes from './ListOfSeasonEpisodes'\nimport Poster from './Poster'\nimport ShowInfo from './ShowInfo'\nimport EpisodeInfo from './EpisodeInfo'\nimport SearchForm from './SearchForm'\nimport Home from './Home';\nimport Notfound from './NotFound'\n// import history from './history'\n\nclass App extends Component {\n   constructor(props) {\n      super(props);\n\n      this.initialState = {\n         searchTitle: '',\n         searchYear: '',\n         searchPage: '',   // the omdb API only returns 10 entries at a time per \"page\"\n         data: [],\n         curTime: null\n      }\n      this.state = this.initialState;\n   }\n\n   render() {\n      return (\n         <Router>\n               <Navbar className=\"navbar-light justify-content-between\" expand=\"\" bg=\"black\">\n                     <Navbar.Brand href=\"/\"><img\n                        src=\"/fmnmtv.png\"\n                        width=\"32\"\n                        height=\"32\"\n                        className=\"d-inline-block align-top\"\n                        alt=\"React Bootstrap logo\" />\n                     </Navbar.Brand>\n                     <SearchForm history={this.props.history} />\n                     <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                     <Navbar.Collapse id=\"basic-navbar-nav\">\n                           <Nav.Link href=\"/\">Home</Nav.Link>\n                           <Nav.Link href=\"/profile\">Profile</Nav.Link>\n                     </Navbar.Collapse>\n               </Navbar>\n               <Switch>\n                  <Route exact path=\"/\" component={Home} />\n                  <Route path=\"/shows/:searchTitle\" component={ListOfShows} />\n                  <Route path=\"/show/:imdbId\" component={ShowInfo} />\n                  <Route path=\"/season/:imdbIdSeason\" component={ListOfSeasonEpisodes} />\n                  <Route path=\"/episode/:imdbId\" component={EpisodeInfo} />\n                  <Route path=\"/poster/:encodedUri\" component={Poster} />\n                  <Route component={Notfound} />\n               </Switch>\n         </Router>\n      );\n   }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/*\n-------- DEV --------\nregion: us-west-2\nUserPoolId: us-west-2_FiMfko5GW\nUserPoolClientId: 1a9lf2mqmlebu4ah9kvp34bm57\nIdentityPoolId: us-west-2:c35870e6-90fb-4c8f-94bc-9d04d018e381\nAttachmentsBucketName: notes-app-2-api-dev-attachmentsbucket-ltwvbw2k2vqr\nServiceEndpoint: https://9iszjse6v2.execute-api.us-west-2.amazonaws.com/dev\n\n-------- PROD --------\nregion: us-west-2\nUserPoolId: us-west-2_EYhvOi9ih\nUserPoolClientId: 6dsq8jtjd65rd7hc5997q67vs9\nIdentityPoolId: us-west-2:d6acf95c-b377-4e44-800f-78d3569bd889\nAttachmentsBucketName: notes-app-2-api-prod-attachmentsbucket-1hphuk2udj87c\nServiceEndpoint: https://p2zr6ah3nb.execute-api.us-west-2.amazonaws.com/prod\n\n*/\n\nconst dev = {\n    STRIPE_KEY: \"pk_test_9Um9N4ov9nTs0vjXDLYYhRUL00DWGXNDvS\",\n    s3: {\n        REGION: \"us-west-2\",\n        BUCKET: \"notes-app-2-api-dev-attachmentsbucket-ltwvbw2k2vqr\",\n    },\n    apiGateway: {\n        REGION: \"us-west-2\",\n        URL: \"https://9iszjse6v2.execute-api.us-west-2.amazonaws.com/dev\"\n    },\n    cognito: {\n        REGION: \"us-west-2\",\n        USER_POOL_ID: \"us-west-2_FiMfko5GW\",\n        APP_CLIENT_ID: \"1a9lf2mqmlebu4ah9kvp34bm57\",\n        IDENTITY_POOL_ID: \"us-west-2:c35870e6-90fb-4c8f-94bc-9d04d018e381\"\n    }\n};\n\nconst prod = {\n    STRIPE_KEY: \"pk_test_9Um9N4ov9nTs0vjXDLYYhRUL00DWGXNDvS\",\n    s3: {\n        REGION: \"us-west-2\",\n        BUCKET: \"notes-app-2-api-prod-attachmentsbucket-1hphuk2udj87c\"\n    },\n    apiGateway: {\n        REGION: \"us-west-2\",\n        URL: \"https://p2zr6ah3nb.execute-api.us-west-2.amazonaws.com/prod\"\n    },\n    cognito: {\n        REGION: \"us-west-2\",\n        USER_POOL_ID: \"us-west-2_EYhvOi9ih\",\n        APP_CLIENT_ID: \"6dsq8jtjd65rd7hc5997q67vs9\",\n        IDENTITY_POOL_ID: \"us-west-2:d6acf95c-b377-4e44-800f-78d3569bd889\"\n    }\n};\n\n// Default to dev if not set\nconst config = process.env.REACT_APP_STAGE === 'prod'\n      ? prod\n      : dev;\n\nexport default {\n    // Add common config values here\n    MAX_ATTACHMENT_SIZE: 5000000,\n        ...config\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Amplify from \"aws-amplify\";\nimport config from \"./config\";\n\nAmplify.configure({\n   Auth: {\n     mandatorySignIn: true,\n     region: config.cognito.REGION,\n     userPoolId: config.cognito.USER_POOL_ID,\n     identityPoolId: config.cognito.IDENTITY_POOL_ID,\n     userPoolWebClientId: config.cognito.APP_CLIENT_ID\n   },\n   Storage: {\n     region: config.s3.REGION,\n     bucket: config.s3.BUCKET,\n     identityPoolId: config.cognito.IDENTITY_POOL_ID\n   },\n   API: {\n     endpoints: [\n       {\n         name: \"fomonomo-tv\",\n         endpoint: config.apiGateway.URL,\n         region: config.apiGateway.REGION\n       },\n     ]\n   }\n });\n \n ReactDOM.render((\n         <App />\n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}